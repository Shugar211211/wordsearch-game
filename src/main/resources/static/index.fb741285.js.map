{"mappings":"AAAO,MAAMA,EAETC,cACIC,KAAKC,gBAAiB,EACtBD,KAAKE,cAAgB,GACrBF,KAAKG,kBACLH,KAAKI,SAAWC,SAASC,uBAAuB,aAAa,GAC7DN,KAAKO,MAAQ,GACbP,KAAKQ,WAAa,E,CAGtBC,gBAAgBC,EAAaC,GACzB,IAAIC,EAAe,GACfC,EAASF,EAAcG,EAAIJ,EAAYI,EACvCC,EAASJ,EAAcK,EAAIN,EAAYM,EAG3C,GAAc,IAAXD,GAAgBF,EAAS,EACxB,IAAI,IAAII,EAAIP,EAAYI,EAAGG,GAAKN,EAAcG,EAAGG,IAC7CL,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcF,eAAeN,EAAcK,aAI5F,GAAc,IAAXD,GAAgBF,EAAS,EAC7B,IAAI,IAAIO,EAAIV,EAAYI,EAAGM,GAAKT,EAAcG,EAAGM,IAC7CR,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcC,eAAeT,EAAcK,aAI5F,GAAc,IAAXH,GAAgBE,EAAS,EAC7B,IAAI,IAAIM,EAAIX,EAAYM,EAAGK,GAAKV,EAAcK,EAAGK,IAC7CT,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcR,EAAcG,eAAeO,aAI5F,GAAc,IAAXR,GAAgBE,EAAS,EAC7B,IAAI,IAAIO,EAAIZ,EAAYM,EAAGM,GAAKX,EAAcK,EAAGM,IAC7CV,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcR,EAAcG,eAAeQ,aAI5F,GAAGP,EAAS,GAAKF,EAAS,EAC3B,IAAI,IAAIU,EAAI,EAAGA,GAAKV,EAAQU,IACxBX,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcT,EAAYI,EAAIS,eAAeb,EAAYM,EAAIO,aAI9G,GAAGR,EAAS,GAAKF,EAAS,EAC3B,IAAI,IAAIW,EAAI,EAAGA,GAAKC,KAAKC,IAAIX,GAASS,IAClCZ,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcT,EAAYI,EAAIU,eAAed,EAAYM,EAAIQ,aAI9G,GAAGT,EAAS,GAAKF,EAAS,EAC3B,IAAI,IAAIc,EAAI,EAAGA,GAAKZ,EAAQY,IACxBf,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcT,EAAYI,EAAIa,eAAejB,EAAYM,EAAIW,aAI9G,GAAGZ,EAAS,GAAKF,EAAS,EAC3B,IAAI,IAAIe,EAAI,EAAGA,GAAKf,EAAQe,IACxBhB,EAAaM,KAAKlB,KAAKI,SAASe,cAAc,cAAcT,EAAYI,EAAIc,eAAelB,EAAYM,EAAIY,QAGnH,OAAOhB,C,CAIXiB,WAAWC,EAAUC,GAKd/B,KAAKI,SAAS4B,WACbhC,KAAKI,SAAS6B,YAAYjC,KAAKI,SAAS4B,WAI5C,MAAME,EAAM7B,SAAS8B,cAAc,SAC7BC,EAAU/B,SAAS8B,cAAc,SAGvC,IAAK,IAAIlB,EAAI,EAAGA,EAAIa,EAAUb,IAAK,CAE/B,MAAMoB,EAAMhC,SAAS8B,cAAc,MAEnC,IAAK,IAAIG,EAAI,EAAGA,EAAIR,EAAUQ,IAAK,CAI/B,MAAMC,EAAOlC,SAAS8B,cAAc,MAC9BK,EAAWnC,SAASoC,eAAeV,EAASd,EAAIa,EAAWQ,IACjEC,EAAKG,YAAYF,GACjBD,EAAKI,aAAa,SAASL,GAC3BC,EAAKI,aAAa,SAAS1B,GAC3BsB,EAAKI,aAAa,cAAeZ,EAASd,EAAIa,EAAWQ,IACzDD,EAAIK,YAAYH,E,CAIpBH,EAAQM,YAAYL,E,CAIxBH,EAAIQ,YAAYN,GAMhBpC,KAAKI,SAASsC,YAAYR,GAO1BA,EAAIU,iBAAiB,aAAcC,IAC/B7C,KAAKC,gBAAiB,EACtB,MAAMsC,EAAOM,EAAMC,OACnB,IAAIhC,GAAKyB,EAAKQ,aAAa,UACvB/B,GAAKuB,EAAKQ,aAAa,UACvBC,EAAST,EAAKQ,aAAa,eAC/B/C,KAAKG,kBAAoB,C,EACrBW,E,EAAGE,E,OAAGgC,E,KAAQT,EACjB,IAGLL,EAAIU,iBAAiB,aAAcC,IAE/B,GADAI,QAAQC,IAAI,QACTlD,KAAKC,eAAgB,CACpB,MAAMsC,EAAOM,EAAMC,OACnB,IAAIhC,GAAKyB,EAAKQ,aAAa,UACvB/B,GAAKuB,EAAKQ,aAAa,UACdR,EAAKQ,aAAa,eAC/B/C,KAAKE,cAAciD,SAAQZ,IACZ,MAARA,GACCA,EAAKa,UAAUC,OAAO,WAAW,IAGzCrD,KAAKE,cAAgBF,KAAKS,gBAAgBT,KAAKG,kBAAmB,C,EAACW,E,EAAGE,IACtEhB,KAAKE,cAAciD,SAAQZ,IACZ,MAARA,GACCA,EAAKa,UAAUE,IAAI,WAAW,G,KAM9CpB,EAAIU,iBAAiB,WAAYC,IAC7B7C,KAAKC,gBAAiB,EACtB,MAAMsD,EAAevD,KAAKE,cAAcsD,QAAO,CAACC,EAAMlB,IAASkB,EAAOlB,EAAKQ,aAAa,gBAAgB,IAClGW,EAAsBH,EAAaI,MAAM,IAAIC,UAAUC,KAAK,KAC1B,IAArC7D,KAAKO,MAAMuD,QAAQP,GAClBvD,KAAKQ,WAAWU,KAAKqC,IAC6B,IAA5CvD,KAAKO,MAAMuD,QAAQJ,GACzB1D,KAAKQ,WAAWU,KAAKwC,GAErB1D,KAAKE,cAAciD,SAAQY,GAAQA,EAAKX,UAAUC,OAAO,cAE7DrD,KAAKE,cAAgB,GACrB+C,QAAQC,IAAIlD,KAAKQ,WAAW,G,EC/JlBH,SAASc,cAAc,gBAE/ByB,iBAAiB,SAASoB,UACpC,MAAMC,EAAO,IAAInE,EACXoE,EAAsB7D,SAASc,cAAc,aAAagD,MAC1DrC,EAAWzB,SAASc,cAAc,cAAcgD,MACtD,IAAIC,QAaRJ,eAA6BlC,EAAUoC,GAEnC,IAAIG,QAAiBC,MAAM,2CAA2CxC,WAAkBoC,KAExF,aADsBG,EAASE,QACdZ,MAAM,I,CAjBJa,CAAc1C,EAAUoC,GAC3CD,EAAK1D,MAAQ2D,EAAoBP,MAAM,KACvCM,EAAKpC,WAAWC,EAAUsC,GAG1B,IAAIK,EAAepE,SAASoC,eAAewB,EAAK1D,OAC5CmE,EAAkBrE,SAASc,cAAc,cAC1CuD,EAAgB1C,WACf0C,EAAgBzC,YAAYyC,EAAgB1C,WAEhD0C,EAAgBhC,YAAY+B,EAAa","sources":["src/js/grid.js","src/js/index.js"],"sourcesContent":["export class Grid {\n\n    constructor() {\n        this.wordSelectMode = false;\n        this.selectedItems = [];\n        this.firstSelectedItem;\n        this.gridArea = document.getElementsByClassName(\"grid-area\")[0];\n        this.words = [];\n        this.foundWords = [];\n    }\n\n    getCellsInRange(firstLetter, currentLetter) {\n        let cellsInRange = [];\n        let deltaX = currentLetter.x - firstLetter.x;\n        let deltaY = currentLetter.y - firstLetter.y;\n\n        // right direction\n        if(deltaY === 0 && deltaX > 0) {\n            for(let i = firstLetter.x; i <= currentLetter.x; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\n            }\n        }\n        // left direction\n        else if(deltaY === 0 && deltaX < 0) {\n            for(let i = firstLetter.x; i >= currentLetter.x; i--) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\n            }\n        }\n        // bottom direction\n        else if(deltaX === 0 && deltaY > 0) {\n            for(let i = firstLetter.y; i <= currentLetter.y; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`));\n            }\n        }\n        // top direction\n        else if(deltaX === 0 && deltaY < 0) {\n            for(let i = firstLetter.y; i >= currentLetter.y; i--) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`));\n            }\n        }\n        // right bottom direction\n        else if(deltaY > 0 && deltaX > 0) {\n            for(let i = 0; i <= deltaX; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y + i}\"]`));\n            }\n        }\n        // left top direction\n        else if(deltaY < 0 && deltaX < 0) {\n            for(let i = 0; i <= Math.abs(deltaY); i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x - i}\"][data-y=\"${firstLetter.y - i}\"]`));\n            }\n        }\n        // left bottom direction\n        else if(deltaY > 0 && deltaX < 0) {\n            for(let i = 0; i <= deltaY; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x - i}\"][data-y=\"${firstLetter.y + i}\"]`));\n            }\n        }\n        // rigth top direction\n        else if(deltaY < 0 && deltaX > 0) {\n            for(let i = 0; i <= deltaX; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y - i}\"]`));\n            }\n        }\n        return cellsInRange;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces\n    renderGrid(gridSize, wordGrid) {\n        // get the reference for the body\n        // var body = document.getElementsByTagName(\"body\")[0];\n        // var gridArea = document.getElementsByClassName(\"grid-area\")[0];\n\n        if(this.gridArea.lastChild) {\n            this.gridArea.removeChild(this.gridArea.lastChild);\n        }\n\n        // creates a <table> element and a <tbody> element\n        const tbl = document.createElement(\"table\");\n        const tblBody = document.createElement(\"tbody\");\n\n        // creating all cells\n        for (let i = 0; i < gridSize; i++) {\n            // creates a table row\n            const row = document.createElement(\"tr\");\n\n            for (let j = 0; j < gridSize; j++) {\n                // Create a <td> element and a text node, make the text\n                // node the contents of the <td>, and put the <td> at\n                // the end of the table row\n                const cell = document.createElement(\"td\");\n                const cellText = document.createTextNode(wordGrid[i * gridSize + j]);\n                cell.appendChild(cellText);\n                cell.setAttribute(\"data-x\",j);\n                cell.setAttribute(\"data-y\",i);\n                cell.setAttribute(\"data-letter\", wordGrid[i * gridSize + j])\n                row.appendChild(cell);\n            }\n\n            // add the row to the end of the table body\n            tblBody.appendChild(row);\n        }\n\n        // put the <tbody> in the <table>\n        tbl.appendChild(tblBody);\n        \n        // appends <table> into <body>\n        // document.body.appendChild(tbl);\n\n        // append <table>into grid-area\n        this.gridArea.appendChild(tbl);\n\n        // sets the border attribute of tbl to '2'\n        // tbl.setAttribute(\"border\", \"2\");\n    \n        // Click Handlers\n\n        tbl.addEventListener(\"mousedown\", (event) => {\n            this.wordSelectMode = true;\n            const cell = event.target;\n            let x = +cell.getAttribute(\"data-x\");\n            let y = +cell.getAttribute(\"data-y\");\n            let letter = cell.getAttribute(\"data-letter\");\n            this.firstSelectedItem = {\n                x, y, letter, cell\n            };\n        });\n        \n        tbl.addEventListener(\"mousemove\", (event) => {\n            console.log(\"move\");\n            if(this.wordSelectMode) {\n                const cell = event.target;\n                let x = +cell.getAttribute(\"data-x\");\n                let y = +cell.getAttribute(\"data-y\");\n                let letter = cell.getAttribute(\"data-letter\");\n                this.selectedItems.forEach(cell => {\n                    if(cell != null) {\n                        cell.classList.remove(\"selected\")\n                    }\n                });\n                this.selectedItems = this.getCellsInRange(this.firstSelectedItem, {x, y});\n                this.selectedItems.forEach(cell => {\n                    if(cell != null) {\n                        cell.classList.add(\"selected\")\n                    }\n                });                \n            }\n        });\n\n        tbl.addEventListener(\"mouseup\", (event) => {\n            this.wordSelectMode = false;\n            const selectedWord = this.selectedItems.reduce((word, cell) => word +=cell.getAttribute(\"data-letter\"), '');\n            const reverseSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\n            if(this.words.indexOf(selectedWord) !== -1) {\n                this.foundWords.push(selectedWord);\n            } else if(this.words.indexOf(reverseSelectedWord) !== -1) {\n                this.foundWords.push(reverseSelectedWord);\n            } else {\n                this.selectedItems.forEach(item => item.classList.remove(\"selected\"));\n            }\n            this.selectedItems = [];\n            console.log(this.foundWords);\n        });\n    }\n}","import { Grid } from \"./grid\";\n\nconst submitWordBtn = document.querySelector(\".submit-word\");\n\nsubmitWordBtn.addEventListener(\"click\", async () => { \n    const grid = new Grid();\n    const commaSeparatedWords = document.querySelector(\"#add-word\").value;\n    const gridSize = document.querySelector(\"#grid-size\").value;\n    let result = await fetchGridInfo(gridSize, commaSeparatedWords);\n    grid.words = commaSeparatedWords.split(\",\");\n    grid.renderGrid(gridSize, result);\n    \n    // display guessed words\n    let wordListNode = document.createTextNode(grid.words);\n    let wordLidtSection = document.querySelector(\".word-list\");\n    if(wordLidtSection.lastChild) {\n        wordLidtSection.removeChild(wordLidtSection.lastChild);\n    }\n    wordLidtSection.appendChild(wordListNode);\n});\n\nasync function fetchGridInfo(gridSize, commaSeparatedWords) {\n    // let response = await fetch(`https://jb-word-search-game-api.herokuapp.com/wordgrid?gridSize=20&words=${commaSeparatedWords}`);\n    let response = await fetch(`http://localhost:8080/wordgrid?gridSize=${gridSize}&words=${commaSeparatedWords}`);\n    let resultStr = await response.text();\n    return resultStr.split(\" \");\n}"],"names":["$29289ae2f853543e$export$ef2184bd89960b14","constructor","this","wordSelectMode","selectedItems","firstSelectedItem","gridArea","document","getElementsByClassName","words","foundWords","getCellsInRange","firstLetter","currentLetter","cellsInRange","deltaX","x","deltaY","y","i","push","querySelector","i1","i2","i3","i4","i5","Math","abs","i6","i7","renderGrid","gridSize","wordGrid","lastChild","removeChild","tbl","createElement","tblBody","row","j","cell","cellText","createTextNode","appendChild","setAttribute","addEventListener","event","target","getAttribute","letter","console","log","forEach","classList","remove","add","selectedWord","reduce","word","reverseSelectedWord","split","reverse","join","indexOf","item","async","grid","commaSeparatedWords","value","result","response","fetch","text","$8f6a480bb40b134f$var$fetchGridInfo","wordListNode","wordLidtSection"],"version":3,"file":"index.fb741285.js.map"}